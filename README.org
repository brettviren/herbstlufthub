#+title: herbstlufthub

This package provides ZeroMQ message passing for interacting with
~herbstluftwm~ and other applications such as ~dzen2~.  

* Dear god, why???

Well, because ~herbstluftwm~ is awesome and ZeroMQ is awesome so of
course they belong together.

More practically, I wanted an event-driven "push" mechanism which
multiplexed multiple sources of events including:

- usual ~herbstclient --idle~

- commands called from herbstluftwm keybindings and their results

- sources from outside the WM

The driving goal is to collect these events to populate a data
stricture that can be applied to a template string in order to
generate a ~dzen2~ or other panel display.

The usual ~panel.sh~ provides most of this but as I tried to extends it
to add things like current backlight, battery, audio volume, there
were two things I wanted to transcend.  First, I fell into using a
polling pattern as I could find no way to immediately update ~dzen2~
from the command bound to a key (eg, to raise the audio volume).
Second, while the ~panel.sh~ script is rather clever (I learned some
new-to-me Bashisms) it was not easy for me to extend.  

And so, herbstlufthub is also meant to be a factoring and
generalization of the core part of ~panel.sh~ which allows for event
driven updates of ~dzen2~.

* Okay, whatever.  But how does it work?

Let me illustrate the *classes* of herbstlufthub commands that can be
run with the provided ~hh~ command:

[[file:herbnet.png]]

The "hub" here is conceptual and is enacted by ZeroMQ PUB/SUB links.
By default, PUB will ~bind()~ to ~ipc://$HOME/hhub.ipc~ and SUB will
~connect()~.  Options allow other or multiple addresses (eg, for ~tcp://~
transport) and to switch which ends bind/connect.

The center of each pillbox node names the ~hh~ command that starts it
and the network may have zero or more of each type of node.  

On the consumer end, the currently provided SUB nodes are:

- ~subpipe~ :: string format events and pipe result to command (mostly for demo)
- ~subdzen~ :: format event data for and pipe to ~dzen2~ 
- ~stdsub~ :: print events to stdout

Feeding these are the PUB nodes:

- ~hcpub~ :: publish ~herbstclient --idle~ events as they come in (see [[Events]] below)
- ~stdpub~ :: read events on ~hh~ stdin and publish
- ~onepub~ :: publish a single event given on the command line
- ~pullpub~ :: recv on a PULL socket and publish 

A companion to this last one is:

- ~onepush~ :: like ~onepub~ but use a PUSH socket eg to talk to ~pullpub~.

In order to deal with the known ZeroMQ "slow subscriber syndrome" the
~onepub~ has a sub-second sleep.  The ~pullpub~ + ~onepush~ is another way
to deal with this.

The diagram is drawn with no cycles but in principle (and in future
practice) there may be some.  For example, consider a herbstluftwm
keybinding as injecting an event which represents a request to modify
the OS or other system (eg, change volume).  Something may subscribe
to that event, perform the volume change and inject back in an event
that indicates the current volume.  This finally may be consumed by
~subdzen~ and reflected in dzen2 display.

* Events

As we are in the land of herbstluftwm, we take all events to be in the
form of what ~herbstclient --idle~.  That is:

#+begin_example
[event_type]<TAB>[ID]<TAB>[args...]
#+end_example


